import { AxiosResponse, AxiosRequestConfig } from "axios";
import { AbstractApi } from "./abstractApi";
import { Config } from "../config";
import url from "url";
{{#each imports~}}
  import { {{title}} } from "../models";
{{/each}}

{{#each servers}}
type {{name}}Server = { name: "{{name}}"{{#if values}}, values: { {{#each values}}{{name}}: {{#if enums}}{{#each enums}}'{{this}}'{{#unless @last}} | {{/unless}}{{/each}}{{else}}string{{/if}} {{/each}} } {{/if}} }
{{/each}}

{{> comment}}
export class {{title}} extends AbstractApi {
  constructor(config: Config) {
    super(config);
  }

  private server({name, values}: {{#each servers}}{{name}}Server{{#unless @last}} | {{/unless}}{{/each}}) {
  {{#each servers}}
    if ('{{name}}' === name) {
      return '{{url}}'
        {{#each values}}
            .replace('{ {{~name~}} }', this.template('{{name}}', values.{{name}}, 'simple', false))
        {{~/each}};
    }
  {{/each}}
    throw new Error('Undefined server. please define server.');
  }

  {{#each paths}}

  {{> comment title=name async=true}}
  {{name}}({{> apis/argument}}): Promise<AxiosResponse{{#if schema}}<{{> models/type schema}}>{{/if}}> {
    const baseURL = config?.baseURL ? config?.baseURL : this.server(server)
    const pathname = {{> apis/path}};
    {{#if queries}}
    const query = {
      {{#each queries}}
      ...this.query("{{name}}", {{name}}, '{{#unless style}}form{{else}}{{style}}{{/unless}}', {{#unless explode}}false{{else}}{{explode}}{{/unless}}),
      {{/each}}
	  };
    {{/if}}
    return this.axios.{{method}}(url.format({ pathname{{#if queries}}, query{{/if}} }), {...config{{#or (not (isEmpty headers)) (not (isEmpty cookies))}}, headers: {...config?.headers{{#if headers}}, ...headers{{/if}}{{#if cookies}}, Cookie: cookies{{/if}} }{{/or}}, baseURL})
  }
  {{/each}}
}
