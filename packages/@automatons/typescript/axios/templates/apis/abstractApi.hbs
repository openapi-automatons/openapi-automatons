import Axios, { AxiosInstance } from "axios";
import { Config } from "../config";

const DateFormat = /^\d{4}-\d{2}-\d{2}([tT]\d{2}:\d{2}:\d{2}(Z|[+-]\d{2}:\d{2})|Z)?$/;
const reviver = (_key: string, value: any) =>
  typeof value === 'string' && DateFormat.test(value) ? new Date(value) : value;

const BASE_AXIOS = Axios.create({
  transformResponse: (data) => JSON.parse(data, reviver)
});

export class AbstractApi {
  protected axios: AxiosInstance = BASE_AXIOS;

  constructor({axios}: Config) {
    if (axios) this.axios = axios;
  }

  protected template(
    name: string,
    value: string | number | Array<string | number> | { [key: string]: string | number },
    style: 'simple' | 'label' | 'matrix',
    explode: boolean) {
    if (style === 'simple') {
      if (!explode) {
        return value instanceof Object
          ? Array.isArray(value)
            ? value.join(',') : Object.entries(value).map(prop => prop.join(',')).flat().join(',')
          : String(value);
      }
      return value instanceof Object
        ? Array.isArray(value)
          ? value.join(',') : Object.entries(value).map(([key, value]) => `${key}=${value}`).flat().join(',')
        : String(value);
    } else if(style === 'label') {
      if (!explode) {
        return `.${ value instanceof Object
          ? Array.isArray(value)
            ? value.join(',') : Object.entries(value).map(prop => prop.join(',')).flat().join(',')
          : String(value) }`;
      }
      return value instanceof Object
        ? Array.isArray(value)
          ? value.join(',') : Object.entries(value).map(([key, value]) => `${key}=${value}`).flat().join(',')
        : String(value);
    } else if(style === 'matrix') {
      if (!explode) {
        return `;${name}=${ value instanceof Object
          ? Array.isArray(value)
            ? value.join(',') : Object.entries(value).map(prop => prop.join(',')).flat().join(',')
          : String(value) }`;
      }
      return `;${ value instanceof Object
        ? Array.isArray(value)
          ? value.map(item => `${name}=${item}`).join(';')
          : Object.entries(value).map(([key, value]) => `${key}=${value}`).flat().join(';')
        : `${name}=${String(value)}` }`;
    }
    throw new Error(`Unsupported style: ${style}`)
  }
}
